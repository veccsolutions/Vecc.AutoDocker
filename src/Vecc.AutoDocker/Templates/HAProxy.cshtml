@using Vecc.AutoDocker.Extensions
@using System
@model Vecc.AutoDocker.SwarmInformation
@{
    var domainKey = "Vecc.AutoDocker.Proxy.Domain"; // fqdn of the site
    var redirectToHttpsKey = "Vecc.AutoDocker.Proxy.RedirectToHttps"; // true/false <- false
    var proxyEnabledKey = "Vecc.AutoDocker.Proxy.Enabled"; // true/false <- false
    var portKey = "Vecc.AutoDocker.Proxy.Port"; // numeric, required
    var useSslKey = "Vecc.AutoDocker.Proxy.UseSsl"; // true/false <- false
    var isProxyKey = "Vecc.AutoDocker.Proxy.IsProxy"; // true/false <- false
    var logKey = "Vecc.AutoDocker.Proxy.Log"; // the content for the log entry in the config file

    var services = Model.SwarmServices.Where(service => service.Spec.LabelIsEnabled(proxyEnabledKey));
    var domainNames = services.Select(service => service.Spec.GetLabelValue(domainKey)?.ToLower())
                              .Where(x => !string.IsNullOrWhiteSpace(x))
                              .Distinct();

    var redirectToHttpsDomains = services.Where(service => service.Spec.LabelIsEnabled(redirectToHttpsKey))
                                         .Select(service => service.Spec.GetLabelValue(domainKey)?.ToLower())
                                         .Where(x => !string.IsNullOrWhiteSpace(x))
                                         .Distinct();

    var proxyServices = Model.GetServicesWithLabel(isProxyKey, "true");
    var proxyService = proxyServices.FirstOrDefault();
    var myNetworks = proxyService?.Spec.TaskTemplate.Networks.Select(x => x.Target).ToArray() ?? new string[0];
}
global
    ssl-default-bind-options no-sslv3 no-tls-tickets force-tlsv12
    ssl-default-bind-ciphers EECDH+AESGCM:EDH+AESGCM
    tune.ssl.default-dh-param 2048
    maxconn 50000
@{
    var logLine = proxyService.Spec.GetLabelValue(logKey);
    if (!string.IsNullOrWhiteSpace(logLine))
    {
<text>
    log @logLine
</text>
    }
}

defaults
    timeout connect 10s
    timeout client 30s
    timeout server 30s
    log global
    mode http
    option httplog
    maxconn 3000
    balance roundrobin

frontend stats
    bind "*:8123" # name ssl crt /run/secrets/haproxy ciphers EECDH+AESGCM:EDH+AESGCM force-tlsv12 no-sslv3
    stats enable
    stats refresh 10s
    stats show-node
    stats admin if TRUE
    stats uri  /

@foreach (var domain in domainNames)
{
    var domainServices = services.Where(service => service.Spec.HasMatchingLabelValue(domainKey, domain));
<text>
backend backend-@domain
    http-request set-header X-Real-IP %[src]
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Forwarded-Ssl off if !{ ssl_fc }
    http-request set-header X-Forwarded-Ssl on if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request del-header Proxy
</text>

    foreach (var domainService in domainServices)
    {
<text>
    # Service: @domainService.Id/@domainService.Spec.Name
    # ---
</text>
        var tasks = Model.SwarmTasks.Where(x => x.ServiceId == domainService.Id);
        var port = domainService.Spec.GetLabelValue(portKey) ?? string.Empty;
        var useSsl = domainService.Spec.LabelIsEnabled(useSslKey)
            ? "ssl" : string.Empty;

        if (!string.IsNullOrWhiteSpace(port))
        {
            port = ":" + port;
        }

        foreach (var task in tasks.Where(x => x.Status.State == Vecc.AutoDocker.Client.Docker.Swarms.TaskState.Running))
        {
            var node = Model.GetNodeForTask(task);
            var ips = new List<string>();
            foreach (var attachment in task.NetworksAttachments.Where(net => myNetworks.Contains(net.Network.Id)))
            {

                foreach (var address in attachment.Addresses)
                {
                    ips.Add(address);
                }
            }
            var ip = ips.First();
            ip = ip.Substring(0, ip.IndexOf("/"));

<text>
    # Task: @task.Id/@task.Name
    # Node: @node.Id/@node.Description
    server @task.Id @ip@port @useSsl verify none cookie @task.Id
</text>
        }
    }
}

frontend http-in
    bind *:80
    mode http
    option forwardfor
    option http-server-close
    option httpclose

    # snazzy log stuff
#    http-request capture req.hdr(Host) len 20
#    http-request capture req.hdr(User-Agent) len 100
#    http-request capture ssl_fc_protocol len 10
#    declare capture response len 50
#    http-response capture res.hdr(Content-Type) id 1

@{
    @foreach (var domain in domainNames)
    {
<text>
    acl host-@domain  hdr(Host) -i @domain
</text>
    }

    foreach (var domain in redirectToHttpsDomains)
    {
<text>
    redirect scheme https code 301 if host-@domain
</text>
    }

    foreach (var domain in domainNames.Where(x => !redirectToHttpsDomains.Contains(x)))
    {
<text>
    use_backend backend-@domain if host-@domain
</text>
    }
}

frontend https-in
    # put all certs in the /run/secrets/haproxy directory.
    bind *:443 ssl crt /run/secrets/haproxy ciphers EECDH+AESGCM:EDH+AESGCM force-tlsv12 no-sslv3
    mode http
    option forwardfor
    option http-server-close
    option httpclose

    # snazzy log stuff
#    http-request capture req.hdr(Host) len 20
#    http-request capture req.hdr(User-Agent) len 100
#    http-request capture ssl_fc_protocol len 10
#    declare capture response len 50
#    http-response capture res.hdr(Content-Type) id 1

@{
    @foreach (var domain in domainNames)
    {
<text>
    acl host-@domain  hdr(Host) -i @domain
</text>
    }

    foreach (var domain in domainNames)
    {
<text>
    use_backend backend-@domain if host-@domain
</text>
    }
}
